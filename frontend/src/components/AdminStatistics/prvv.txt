import React, { Component } from "react";
import "./adminstatis.css";
import AdminNavbar from "../AdminNavbar";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Legend
} from "recharts";

class AdminStatistics extends Component {
  state = {
    users: [],
    posts: [],
    categories: [],
    tags: [],
    postTags: [], // NEW: store post_tags mapping
    categoryUsage: [],
    tagUsage: [],
    loading: true,
  };

  componentDidMount() {
    this.fetchData();
  }

  fetchData = async () => {
    try {
      // Fetch all required data in parallel
      const [usersRes, postsRes, catRes, tagRes, postTagsRes] = await Promise.all([
        fetch("http://localhost:8080/api/users"),
        fetch("http://localhost:8080/api/posts"),
        fetch("http://localhost:8080/api/categories"),
        fetch("http://localhost:8080/api/tags"),
        fetch("http://localhost:8080/api/tags/post-tags") // endpoint to fetch post_tags
      ]);

      const users = await usersRes.json();
      const posts = await postsRes.json();
      const categories = await catRes.json();
      const tags = await tagRes.json();
      const postTags = await postTagsRes.json();
      console.log(postTags)
      // Compute usages
      const categoryUsage = this.countCategoryUsage(posts, categories);
      const tagUsage = this.countTagUsage(postTags, tags);

      this.setState({
        users,
        posts,
        categories,
        tags,
        postTags,
        categoryUsage,
        tagUsage,
        loading: false,
      });
    } catch (error) {
      console.error("Error loading statistics:", error);
      this.setState({ loading: false });
    }
  };

  // Count how many posts are in each category
  countCategoryUsage(posts, categories) {
    const counts = {};
    posts.forEach((p) => {
      counts[p.category_id] = (counts[p.category_id] || 0) + 1;
    });
    return categories.map((cat) => ({
      label: cat.name,
      count: counts[cat.id] || 0,
    }));
  }

  // Count how many times each tag is used (from post_tags table)
  countTagUsage(postTags, tags) {
  const counts = {};

  // postTags is [[postId, tagId], ...]
  postTags.forEach(([postId, tagId]) => {
    counts[tagId] = (counts[tagId] || 0) + 1;
  });

  return tags.map((tag) => ({
    label: tag.name,
    count: counts[tag.id] || 0,
  }));
}


  render() {
    const { users, posts, categoryUsage, tagUsage, loading } = this.state;
    console.log(tagUsage)
    if (loading) {
      return (
        <div className="admin-statistics-container">
          <p className="loading-text">Loading statistics...</p>
        </div>
      );
    }

    // Compute unique roles
    const roles = [...new Set(users.map((u) => u.role))];

    // Most popular post by content length
    const mostPopular = posts.reduce(
      (a, b) => (a.content?.length > b.content?.length ? a : b),
      {}
    );

    // Latest post by created_at timestamp
    const latestPost = posts.reduce(
      (a, b) =>
        new Date(a.created_at || 0) > new Date(b.created_at || 0) ? a : b,
      {}
    );

    // Colors for charts
    const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#AA336A"];

    return (
      <>
        <AdminNavbar />
        <div className="admin-statistics-container">
          <h2 className="page-title">Dashboard</h2>

          {/* User Stats */}
          <section className="stats-section">
            <h3 className="section-title">User Statistics</h3>
            <div className="stat-cards">
              <div className="stat-card">
                <p className="stat-label">Total Users</p>
                <h2 className="stat-value">{users.length}</h2>
              </div>
              <div className="stat-card">
                <p className="stat-label">Roles</p>
                <h2 className="stat-value">{roles.join(", ")}</h2>
              </div>
            </div>
          </section>

          {/* Post Stats */}
          <section className="stats-section">
            <h3 className="section-title">Post Statistics</h3>
            <div className="stat-cards">
              <div className="stat-card">
                <p className="stat-label">Most Popular Post</p>
                <h3 className="stat-value">"{mostPopular?.title || "-"}"</h3>
              </div>
              <div className="stat-card">
                <p className="stat-label">Recently Created</p>
                <h3 className="stat-value">"{latestPost?.title || "-"}"</h3>
              </div>
            </div>
          </section>

          {/* Category Usage Bar Chart */}
          <section className="stats-section">
            <h3 className="section-title">Category Usage</h3>
            <div className="chart-container">
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={categoryUsage}>
                  <XAxis dataKey="label" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </section>

          {/* Tag Usage Pie Chart */}
          <section className="stats-section">
            <h3 className="section-title">Tag Usage</h3>
            <div className="chart-container">
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={tagUsage}
                    dataKey="count"
                    nameKey="label"
                    outerRadius={100}
                    fill="#82ca9d"
                    label
                  >
                    {tagUsage.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Legend />
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </section>
        </div>
      </>
    );
  }
}

export default AdminStatistics;
